---
# Configure kubectl on the master node

- name: Create ~/.kube directory if it doesn't exist
  ansible.builtin.file:
    path: ~/.kube
    state: directory
    mode: '0700'

- name: Check if k3s.yaml exists
  ansible.builtin.stat:
    path: /etc/rancher/k3s/k3s.yaml
  register: k3s_config_file
  when: not ansible_check_mode

- name: Copy k3s.yaml to ~/.kube/config (if exists)
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~/.kube/config
    remote_src: true
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  when: not ansible_check_mode and k3s_config_file.stat.exists

- name: Create dummy kubeconfig for check mode
  ansible.builtin.copy:
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: default
        cluster:
          server: https://127.0.0.1:6443
      users:
      - name: default
      contexts:
      - name: default
        context:
          cluster: default
          user: default
      current-context: default
    dest: ~/.kube/config
    mode: '0600'
  when: ansible_check_mode

- name: Replace https://localhost:6443 with the actual server IP
  ansible.builtin.replace:
    path: ~/.kube/config
    regexp: 'https://127.0.0.1:6443'
    replace: 'https://{{ k3s_apiserver_host }}:{{ k3s_apiserver_port }}'
  when: not ansible_check_mode and k3s_config_file.stat.exists | default(false)

- name: Set KUBECONFIG in .bashrc
  ansible.builtin.lineinfile:
    path: ~/.bashrc
    line: 'export KUBECONFIG=~/.kube/config'
    state: present
    create: yes

- name: Create kubectl symlink if it doesn't exist
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link
    force: no
  when: not ansible_check_mode

- name: Create dummy kubectl link in check mode
  ansible.builtin.debug:
    msg: 'Would create kubectl symlink (skipped in check mode)'
  when: ansible_check_mode

- name: Get current kubectl version
  ansible.builtin.command: kubectl version --client -o json
  register: kubectl_version
  changed_when: false
  failed_when: false

- name: Display kubectl version
  ansible.builtin.debug:
    msg: "kubectl configured successfully. Version: {{ kubectl_version.stdout | default('Unknown') }}"

- name: Copy kubeconfig to local machine for remote access
  ansible.builtin.fetch:
    src: ~/.kube/config
    dest: '{{ playbook_dir }}/../kubeconfig'
    flat: yes
  when: k3s_copy_kubeconfig_to_local | default(false) | bool

- name: Set remote access instructions message
  ansible.builtin.set_fact:
    remote_access_msg: >-
      To access the cluster remotely:
      export KUBECONFIG={{ playbook_dir }}/../kubeconfig
      kubectl get nodes
  when: k3s_copy_kubeconfig_to_local | default(false) | bool

- name: Display remote access instructions
  ansible.builtin.debug:
    msg: "{{ remote_access_msg | default('Remote kubeconfig copy not enabled. Set k3s_copy_kubeconfig_to_local: true to enable.') }}"
