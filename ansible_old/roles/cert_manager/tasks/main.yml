---
# Main tasks for cert-manager role

# 1. Check if cert-manager is already installed
- name: Check if cert-manager is available
  ansible.builtin.shell: |
    kubectl get deployment -n cert-manager cert-manager -o name
  register: cert_manager_check
  ignore_errors: true
  changed_when: false
  failed_when: false

# 2. Setup Helm repository
- name: Add cert-manager Helm repository
  ansible.builtin.command: helm repo add jetstack https://charts.jetstack.io
  changed_when: false
  when: cert_manager_check.rc != 0

- name: Update Helm repositories
  ansible.builtin.command: helm repo update
  changed_when: false
  when: cert_manager_check.rc != 0

# 3. Create namespace and prepare configuration
- name: Create cert-manager namespace
  ansible.builtin.shell: kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
  changed_when: false
  when: cert_manager_check.rc != 0

- name: Create cert-manager values file
  ansible.builtin.template:
    src: cert-manager-values.yaml.j2
    dest: /tmp/cert-manager-values.yaml
    mode: '0644'
  when: cert_manager_check.rc != 0

# 4. Install cert-manager
- name: Install cert-manager
  ansible.builtin.command: >
    helm upgrade --install cert-manager jetstack/cert-manager
    --namespace cert-manager
    --version {{ cert_manager_version | default('v1.17.1') }}
    --values /tmp/cert-manager-values.yaml
    --timeout 300s
    --wait
  register: certmanager_install
  changed_when: certmanager_install.rc == 0
  when: cert_manager_check.rc != 0

# 5. Wait for cert-manager to be ready
- name: Wait for cert-manager pods to be ready
  ansible.builtin.shell: |
    kubectl wait --for=condition=available deployment/cert-manager -n cert-manager --timeout=180s
    kubectl wait --for=condition=available deployment/cert-manager-webhook -n cert-manager --timeout=180s
    kubectl wait --for=condition=available deployment/cert-manager-cainjector -n cert-manager --timeout=180s
  changed_when: false
  when: certmanager_install is changed or cert_manager_check.rc != 0

# 6. Configure CloudFlare DNS provider
- name: Create Cloudflare API token secret
  ansible.builtin.shell: |
    kubectl create secret generic cloudflare-api-token-secret \
      --namespace cert-manager \
      --from-literal=api-token={{ cloudflare_api_token }} \
      --dry-run=client -o yaml | kubectl apply -f -
  changed_when: true
  when: cloudflare_api_token | length > 0

# 7. Apply ClusterIssuer for certificate issuing
- name: Apply ClusterIssuer configuration
  ansible.builtin.template:
    src: clusterissuer.yaml.j2
    dest: /tmp/clusterissuer.yaml
    mode: '0644'
  register: issuer_template

- name: Apply ClusterIssuer
  ansible.builtin.command: kubectl apply -f /tmp/clusterissuer.yaml
  changed_when: true
  when: issuer_template is changed

# 8. Create wildcard certificate for the domain
- name: Apply wildcard certificate
  ansible.builtin.template:
    src: certificate-wildcard.yaml.j2
    dest: /tmp/certificate-wildcard.yaml
    mode: '0644'
  register: cert_template

- name: Apply certificate
  ansible.builtin.command: kubectl apply -f /tmp/certificate-wildcard.yaml
  changed_when: true
  when: cert_template is changed

# 9. Verify certificate status
- name: Check certificate issuance status
  ansible.builtin.shell: |
    kubectl get certificate {{ cert_manager_certificate_name | default('phizio-wildcard-cert') }} \
    -n {{ cert_manager_certificate_namespace | default('default') }} \
    -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
  register: cert_status
  ignore_errors: true
  changed_when: false
  failed_when: false

- name: Wait for certificate to be issued (non-blocking)
  ansible.builtin.shell: |
    for i in {1..10}; do
      CERT_STATUS=$(kubectl get certificate {{ cert_manager_certificate_name | default('phizio-wildcard-cert') }} \
      -n {{ cert_manager_certificate_namespace | default('default') }} \
      -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')

      if [ "$CERT_STATUS" == "True" ]; then
        echo "Certificate is ready"
        exit 0
      else
        echo "Certificate not ready yet, waiting... (attempt $i/10)"
        sleep 15
      fi
    done
    echo "Certificate still not ready after timeout, but continuing anyway"
    exit 0
  when: cert_status.stdout != "True"
  changed_when: false
